Size, Sum, Maximum And Height Of A Binary Tree

Easy

1. You are given a partially written BinaryTree class.
2. You are required to complete the body of size, sum, max and height function. The functions are expected to
    2.1. size - return the number of nodes in BinaryTree
    2.2. sum - return the sum of nodes in BinaryTree
    2.3. max - return the highest node in BinaryTree
    2.4. height - return the height of tree in terms of edges
3. Input and Output is managed for you.

#include<iostream>
#include<climits>
#include<string.h>
#include<vector>

using namespace std;

// structure of node
class Node
{
public:
    int data;
    Node *left = nullptr;
    Node *right = nullptr;
    Node(int data)
    {
        this->data = data;
    }
};

int size(Node *node)
{
   if(node == nullptr) return 0;
   int sz = 0;
   int lsz = size(node->left);
   int rsz = size(node->right);

   sz = lsz + rsz + 1;
   return sz;
}

int height(Node *node)
{
    if(node == nullptr) return -1;
    
    int lh = height(node->left);
    int rh = height(node->right);
    int th = max(lh, rh) + 1;
    return th;
}

int maximum(Node *node)
{
    
    if(node == nullptr) return INT_MIN;

    int lmax = maximum(node->left);
    int rmax = maximum(node->right);
    
    int tmax = max(lmax , max(rmax, node->data));
    return tmax;
}

int sum(Node *root)
{
    if(root == nullptr) return 0;
    int ans = 0;
    int lsum = sum(root->left);
    int rsum = sum(root->right);

    ans = lsum + rsum + root->data;
    return ans;    
}
